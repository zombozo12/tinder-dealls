// Code generated by MockGen. DO NOT EDIT.
// Source: services/dependencies.go

// Package services is a generated GoMock package.
package services

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/zombozo12/tinder-dealls/domain"
)

// MockAuthRepoInterface is a mock of AuthRepoInterface interface.
type MockAuthRepoInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAuthRepoInterfaceMockRecorder
}

// MockAuthRepoInterfaceMockRecorder is the mock recorder for MockAuthRepoInterface.
type MockAuthRepoInterfaceMockRecorder struct {
	mock *MockAuthRepoInterface
}

// NewMockAuthRepoInterface creates a new mock instance.
func NewMockAuthRepoInterface(ctrl *gomock.Controller) *MockAuthRepoInterface {
	mock := &MockAuthRepoInterface{ctrl: ctrl}
	mock.recorder = &MockAuthRepoInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthRepoInterface) EXPECT() *MockAuthRepoInterfaceMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockAuthRepoInterface) Login(ctx context.Context, req domain.AuthRequest) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, req)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockAuthRepoInterfaceMockRecorder) Login(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthRepoInterface)(nil).Login), ctx, req)
}

// Register mocks base method.
func (m *MockAuthRepoInterface) Register(ctx context.Context, req domain.AuthRequest) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, req)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockAuthRepoInterfaceMockRecorder) Register(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockAuthRepoInterface)(nil).Register), ctx, req)
}

// UpdateToken mocks base method.
func (m *MockAuthRepoInterface) UpdateToken(ctx context.Context, userID int64, req domain.UpdateTokenRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateToken", ctx, userID, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateToken indicates an expected call of UpdateToken.
func (mr *MockAuthRepoInterfaceMockRecorder) UpdateToken(ctx, userID, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateToken", reflect.TypeOf((*MockAuthRepoInterface)(nil).UpdateToken), ctx, userID, req)
}

// MockProfileRepoInterface is a mock of ProfileRepoInterface interface.
type MockProfileRepoInterface struct {
	ctrl     *gomock.Controller
	recorder *MockProfileRepoInterfaceMockRecorder
}

// MockProfileRepoInterfaceMockRecorder is the mock recorder for MockProfileRepoInterface.
type MockProfileRepoInterfaceMockRecorder struct {
	mock *MockProfileRepoInterface
}

// NewMockProfileRepoInterface creates a new mock instance.
func NewMockProfileRepoInterface(ctrl *gomock.Controller) *MockProfileRepoInterface {
	mock := &MockProfileRepoInterface{ctrl: ctrl}
	mock.recorder = &MockProfileRepoInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProfileRepoInterface) EXPECT() *MockProfileRepoInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockProfileRepoInterface) Create(ctx context.Context, userId int64, req domain.ProfileRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, userId, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockProfileRepoInterfaceMockRecorder) Create(ctx, userId, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProfileRepoInterface)(nil).Create), ctx, userId, req)
}

// GetProfile mocks base method.
func (m *MockProfileRepoInterface) GetProfile(ctx context.Context, userID int64) (*domain.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfile", ctx, userID)
	ret0, _ := ret[0].(*domain.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfile indicates an expected call of GetProfile.
func (mr *MockProfileRepoInterfaceMockRecorder) GetProfile(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockProfileRepoInterface)(nil).GetProfile), ctx, userID)
}

// GetProfileRecommendation mocks base method.
func (m *MockProfileRepoInterface) GetProfileRecommendation(ctx context.Context, interest string, notInUserID []int64) ([]domain.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfileRecommendation", ctx, interest, notInUserID)
	ret0, _ := ret[0].([]domain.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfileRecommendation indicates an expected call of GetProfileRecommendation.
func (mr *MockProfileRepoInterfaceMockRecorder) GetProfileRecommendation(ctx, interest, notInUserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileRecommendation", reflect.TypeOf((*MockProfileRepoInterface)(nil).GetProfileRecommendation), ctx, interest, notInUserID)
}

// UpdateProfile mocks base method.
func (m *MockProfileRepoInterface) UpdateProfile(ctx context.Context, userID int64, req domain.ProfileRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfile", ctx, userID, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProfile indicates an expected call of UpdateProfile.
func (mr *MockProfileRepoInterfaceMockRecorder) UpdateProfile(ctx, userID, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockProfileRepoInterface)(nil).UpdateProfile), ctx, userID, req)
}

// UpdateProfilePic mocks base method.
func (m *MockProfileRepoInterface) UpdateProfilePic(ctx context.Context, userID int64, req domain.UpdateProfilePicRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfilePic", ctx, userID, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProfilePic indicates an expected call of UpdateProfilePic.
func (mr *MockProfileRepoInterfaceMockRecorder) UpdateProfilePic(ctx, userID, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfilePic", reflect.TypeOf((*MockProfileRepoInterface)(nil).UpdateProfilePic), ctx, userID, req)
}

// MockRedisRepoInterface is a mock of RedisRepoInterface interface.
type MockRedisRepoInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRedisRepoInterfaceMockRecorder
}

// MockRedisRepoInterfaceMockRecorder is the mock recorder for MockRedisRepoInterface.
type MockRedisRepoInterfaceMockRecorder struct {
	mock *MockRedisRepoInterface
}

// NewMockRedisRepoInterface creates a new mock instance.
func NewMockRedisRepoInterface(ctrl *gomock.Controller) *MockRedisRepoInterface {
	mock := &MockRedisRepoInterface{ctrl: ctrl}
	mock.recorder = &MockRedisRepoInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedisRepoInterface) EXPECT() *MockRedisRepoInterfaceMockRecorder {
	return m.recorder
}

// Exists mocks base method.
func (m *MockRedisRepoInterface) Exists(ctx context.Context, keys ...string) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exists", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockRedisRepoInterfaceMockRecorder) Exists(ctx interface{}, keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockRedisRepoInterface)(nil).Exists), varargs...)
}

// Expire mocks base method.
func (m *MockRedisRepoInterface) Expire(ctx context.Context, key string, expiration int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Expire", ctx, key, expiration)
	ret0, _ := ret[0].(error)
	return ret0
}

// Expire indicates an expected call of Expire.
func (mr *MockRedisRepoInterfaceMockRecorder) Expire(ctx, key, expiration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Expire", reflect.TypeOf((*MockRedisRepoInterface)(nil).Expire), ctx, key, expiration)
}

// Get mocks base method.
func (m *MockRedisRepoInterface) Get(ctx context.Context, key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRedisRepoInterfaceMockRecorder) Get(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRedisRepoInterface)(nil).Get), ctx, key)
}

// GetValues mocks base method.
func (m *MockRedisRepoInterface) GetValues(ctx context.Context, key string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValues", ctx, key)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValues indicates an expected call of GetValues.
func (mr *MockRedisRepoInterfaceMockRecorder) GetValues(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValues", reflect.TypeOf((*MockRedisRepoInterface)(nil).GetValues), ctx, key)
}

// Incr mocks base method.
func (m *MockRedisRepoInterface) Incr(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Incr", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Incr indicates an expected call of Incr.
func (mr *MockRedisRepoInterfaceMockRecorder) Incr(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Incr", reflect.TypeOf((*MockRedisRepoInterface)(nil).Incr), ctx, key)
}

// Set mocks base method.
func (m *MockRedisRepoInterface) Set(ctx context.Context, key string, value interface{}, expiration int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, value, expiration)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockRedisRepoInterfaceMockRecorder) Set(ctx, key, value, expiration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockRedisRepoInterface)(nil).Set), ctx, key, value, expiration)
}

// MockInventoryRepoInterface is a mock of InventoryRepoInterface interface.
type MockInventoryRepoInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInventoryRepoInterfaceMockRecorder
}

// MockInventoryRepoInterfaceMockRecorder is the mock recorder for MockInventoryRepoInterface.
type MockInventoryRepoInterfaceMockRecorder struct {
	mock *MockInventoryRepoInterface
}

// NewMockInventoryRepoInterface creates a new mock instance.
func NewMockInventoryRepoInterface(ctrl *gomock.Controller) *MockInventoryRepoInterface {
	mock := &MockInventoryRepoInterface{ctrl: ctrl}
	mock.recorder = &MockInventoryRepoInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInventoryRepoInterface) EXPECT() *MockInventoryRepoInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockInventoryRepoInterface) Create(ctx context.Context, req domain.CreateInventoryRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockInventoryRepoInterfaceMockRecorder) Create(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockInventoryRepoInterface)(nil).Create), ctx, req)
}

// GetByUserId mocks base method.
func (m *MockInventoryRepoInterface) GetByUserId(ctx context.Context, userID int64) (*domain.Inventory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserId", ctx, userID)
	ret0, _ := ret[0].(*domain.Inventory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserId indicates an expected call of GetByUserId.
func (mr *MockInventoryRepoInterfaceMockRecorder) GetByUserId(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserId", reflect.TypeOf((*MockInventoryRepoInterface)(nil).GetByUserId), ctx, userID)
}

// UpdateLikes mocks base method.
func (m *MockInventoryRepoInterface) UpdateLikes(ctx context.Context, userID int64, likes int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLikes", ctx, userID, likes)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLikes indicates an expected call of UpdateLikes.
func (mr *MockInventoryRepoInterfaceMockRecorder) UpdateLikes(ctx, userID, likes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLikes", reflect.TypeOf((*MockInventoryRepoInterface)(nil).UpdateLikes), ctx, userID, likes)
}

// UpdateSuperLikes mocks base method.
func (m *MockInventoryRepoInterface) UpdateSuperLikes(ctx context.Context, userID int64, superLikes int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSuperLikes", ctx, userID, superLikes)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSuperLikes indicates an expected call of UpdateSuperLikes.
func (mr *MockInventoryRepoInterfaceMockRecorder) UpdateSuperLikes(ctx, userID, superLikes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSuperLikes", reflect.TypeOf((*MockInventoryRepoInterface)(nil).UpdateSuperLikes), ctx, userID, superLikes)
}

// UpdateSwipes mocks base method.
func (m *MockInventoryRepoInterface) UpdateSwipes(ctx context.Context, userID int64, swipes int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSwipes", ctx, userID, swipes)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSwipes indicates an expected call of UpdateSwipes.
func (mr *MockInventoryRepoInterfaceMockRecorder) UpdateSwipes(ctx, userID, swipes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSwipes", reflect.TypeOf((*MockInventoryRepoInterface)(nil).UpdateSwipes), ctx, userID, swipes)
}

// MockMatchedRepoInterface is a mock of MatchedRepoInterface interface.
type MockMatchedRepoInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMatchedRepoInterfaceMockRecorder
}

// MockMatchedRepoInterfaceMockRecorder is the mock recorder for MockMatchedRepoInterface.
type MockMatchedRepoInterfaceMockRecorder struct {
	mock *MockMatchedRepoInterface
}

// NewMockMatchedRepoInterface creates a new mock instance.
func NewMockMatchedRepoInterface(ctrl *gomock.Controller) *MockMatchedRepoInterface {
	mock := &MockMatchedRepoInterface{ctrl: ctrl}
	mock.recorder = &MockMatchedRepoInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMatchedRepoInterface) EXPECT() *MockMatchedRepoInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockMatchedRepoInterface) Create(ctx context.Context, req domain.MatchRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockMatchedRepoInterfaceMockRecorder) Create(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMatchedRepoInterface)(nil).Create), ctx, req)
}

// IsExists mocks base method.
func (m *MockMatchedRepoInterface) IsExists(ctx context.Context, req domain.MatchRequest) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExists", ctx, req)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsExists indicates an expected call of IsExists.
func (mr *MockMatchedRepoInterfaceMockRecorder) IsExists(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExists", reflect.TypeOf((*MockMatchedRepoInterface)(nil).IsExists), ctx, req)
}

// IsMatched mocks base method.
func (m *MockMatchedRepoInterface) IsMatched(ctx context.Context, req domain.MatchRequest) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMatched", ctx, req)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsMatched indicates an expected call of IsMatched.
func (mr *MockMatchedRepoInterfaceMockRecorder) IsMatched(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMatched", reflect.TypeOf((*MockMatchedRepoInterface)(nil).IsMatched), ctx, req)
}

// MockNotificationRepoInterface is a mock of NotificationRepoInterface interface.
type MockNotificationRepoInterface struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationRepoInterfaceMockRecorder
}

// MockNotificationRepoInterfaceMockRecorder is the mock recorder for MockNotificationRepoInterface.
type MockNotificationRepoInterfaceMockRecorder struct {
	mock *MockNotificationRepoInterface
}

// NewMockNotificationRepoInterface creates a new mock instance.
func NewMockNotificationRepoInterface(ctrl *gomock.Controller) *MockNotificationRepoInterface {
	mock := &MockNotificationRepoInterface{ctrl: ctrl}
	mock.recorder = &MockNotificationRepoInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationRepoInterface) EXPECT() *MockNotificationRepoInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockNotificationRepoInterface) Create(ctx context.Context, req domain.NotificationRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockNotificationRepoInterfaceMockRecorder) Create(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockNotificationRepoInterface)(nil).Create), ctx, req)
}

// GetAllByUserId mocks base method.
func (m *MockNotificationRepoInterface) GetAllByUserId(ctx context.Context, userID int64) ([]domain.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByUserId", ctx, userID)
	ret0, _ := ret[0].([]domain.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByUserId indicates an expected call of GetAllByUserId.
func (mr *MockNotificationRepoInterfaceMockRecorder) GetAllByUserId(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByUserId", reflect.TypeOf((*MockNotificationRepoInterface)(nil).GetAllByUserId), ctx, userID)
}

// SetRead mocks base method.
func (m *MockNotificationRepoInterface) SetRead(ctx context.Context, notificationID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRead", ctx, notificationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRead indicates an expected call of SetRead.
func (mr *MockNotificationRepoInterfaceMockRecorder) SetRead(ctx, notificationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRead", reflect.TypeOf((*MockNotificationRepoInterface)(nil).SetRead), ctx, notificationID)
}
